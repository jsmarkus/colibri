// Generated by CoffeeScript 1.3.3
(function() {
  var Method,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  module.exports = Method = (function() {

    function Method(model, path, options, verb, steps) {
      var _ref;
      this.model = model;
      if (path == null) {
        path = null;
      }
      this.options = options != null ? options : {};
      this.begin = __bind(this.begin, this);

      this.verb = verb != null ? verb : this.defaultVerb();
      if ((_ref = this.verb) !== 'all' && _ref !== 'get' && _ref !== 'post' && _ref !== 'put' && _ref !== 'del') {
        throw new Error("Undefined verb '" + this.verb + "'");
      }
      this.path = path != null ? path : this.defaultPath();
      this.steps = steps != null ? steps : this.defaultSteps();
      this.routes = {};
      this.autoAdd();
    }

    Method.prototype.defaultSteps = function() {
      return [];
    };

    Method.prototype.defaultVerb = function() {
      return 'all';
    };

    Method.prototype.defaultPath = function() {
      return '/';
    };

    Method.prototype.routesByStep = function(step) {
      if (this.routes[step]) {
        return this.routes[step];
      }
      return [];
    };

    Method.prototype.autoAdd = function() {
      var step, _i, _len, _ref, _results;
      _ref = this.steps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        if (toString.call(this[step]) === '[object Function]') {
          _results.push(this.add(step, this[step]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Method.prototype.use = function(hooks) {
      var middleware, step, _results;
      _results = [];
      for (step in hooks) {
        if (!__hasProp.call(hooks, step)) continue;
        middleware = hooks[step];
        _results.push(this.add(step, middleware));
      }
      return _results;
    };

    Method.prototype.add = function(step, middleware) {
      if (!this.routes[step]) {
        this.routes[step] = [];
      }
      return this.routes[step].push(middleware);
    };

    Method.prototype.getVerb = function() {
      return this.verb;
    };

    Method.prototype.getPath = function() {
      return this.path;
    };

    Method.prototype.getMiddleware = function() {
      var step;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.steps;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          step = _ref[_i];
          _results.push(this.routesByStep(step));
        }
        return _results;
      }).call(this);
    };

    Method.prototype.begin = function(req, res, next) {
      req.rest = {};
      req.rest.model = this.model;
      req.rest.currentTime = new Date;
      return next(null);
    };

    return Method;

  })();

}).call(this);
