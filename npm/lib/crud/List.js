// Generated by CoffeeScript 1.3.3
(function() {
  var List, Method,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Method = require('../Method');

  module.exports = List = (function(_super) {

    __extends(List, _super);

    function List() {
      return List.__super__.constructor.apply(this, arguments);
    }

    List.prototype.defaultVerb = function() {
      return 'get';
    };

    List.prototype.defaultSteps = function() {
      return ['begin', 'input', 'query', 'load', 'output'];
    };

    List.prototype.input = function(req, res, next) {
      return next(null);
    };

    List.prototype.query = function(req, res, next) {
      var rest;
      rest = req.rest;
      rest.query = rest.model.find();
      return next(null);
    };

    List.prototype.load = function(req, res, next) {
      var rest;
      rest = req.rest;
      return rest.query.exec(function(err, docs) {
        if (err) {
          return next(err);
        } else {
          rest.documents = docs;
          return next(null);
        }
      });
    };

    List.prototype.output = function(req, res, next) {
      var doc, rest;
      rest = req.rest;
      if (!rest.documents) {
        return res.send(404);
      } else {
        return res.json((function() {
          var _i, _len, _ref, _results;
          _ref = rest.documents;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            doc = _ref[_i];
            _results.push(doc.toObject());
          }
          return _results;
        })());
      }
    };

    return List;

  })(Method);

}).call(this);
