// Generated by CoffeeScript 1.3.3
(function() {
  var Method, Put,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Method = require('../Method');

  module.exports = Put = (function(_super) {

    __extends(Put, _super);

    function Put() {
      return Put.__super__.constructor.apply(this, arguments);
    }

    Put.prototype.defaultVerb = function() {
      return 'put';
    };

    Put.prototype.defaultSteps = function() {
      return ['begin', 'input', 'load', 'update', 'save', 'serialize', 'output'];
    };

    Put.prototype.input = function(req, res, next) {
      var rest;
      rest = req.rest;
      rest._id = req.param('_id');
      rest.fieldValues = req.body;
      return next(null);
    };

    Put.prototype.load = function(req, res, next) {
      var rest, _id,
        _this = this;
      rest = req.rest;
      _id = rest._id;
      return rest.model.findById(_id, function(err, doc) {
        if (err) {
          return next(err);
        } else {
          if (!doc) {
            if (_this.options.upsert) {
              doc = new rest.model;
              doc._id = _id;
              if (_this.options.ctimeField) {
                doc[_this.options.ctimeField] = rest.currentTime;
              }
            } else {
              res.send(404);
              return;
            }
          }
          rest.document = doc;
          return next(null);
        }
      });
    };

    Put.prototype.update = function(req, res, next) {
      var field, rest, self, value, _ref;
      rest = req.rest;
      self = rest.method;
      _ref = rest.fieldValues;
      for (field in _ref) {
        if (!__hasProp.call(_ref, field)) continue;
        value = _ref[field];
        rest.document[field] = value;
      }
      if (this.options.mtimeField) {
        rest.document[this.options.mtimeField] = rest.currentTime;
      }
      return next(null);
    };

    Put.prototype.save = function(req, res, next) {
      var rest;
      rest = req.rest;
      return rest.document.save(function(err) {
        if (err) {
          return next(err);
        } else {
          return next(null);
        }
      });
    };

    Put.prototype.serialize = function(req, res, next) {
      var rest;
      rest = req.rest;
      rest.result = rest.document.toObject();
      return next(null);
    };

    return Put;

  })(Method);

}).call(this);
